// Generated by Dagger (https://google.github.io/dagger).
package smartbox.test.application.di.app;

import android.app.Activity;
import android.arch.lifecycle.ViewModelProvider;
import android.content.SharedPreferences;
import android.support.v4.app.Fragment;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;
import retrofit2.Converter;
import retrofit2.Retrofit;
import smartbox.test.application.app.App;
import smartbox.test.application.app.App_MembersInjector;
import smartbox.test.application.app.home.EventsFragment;
import smartbox.test.application.app.home.EventsFragment_MembersInjector;
import smartbox.test.application.app.home.InformationFragment;
import smartbox.test.application.app.home.InformationFragment_MembersInjector;
import smartbox.test.application.app.home.MainActivity;
import smartbox.test.application.app.home.MainActivity_MembersInjector;
import smartbox.test.application.app.home.MapFragment;
import smartbox.test.application.app.home.MapFragment_MembersInjector;
import smartbox.test.application.app.home.ShopsFragment;
import smartbox.test.application.app.home.ShopsFragment_MembersInjector;
import smartbox.test.application.app.home.VievPagerFragment;
import smartbox.test.application.app.home.VievPagerFragment_MembersInjector;
import smartbox.test.application.app.home.adapter.EventsRecyclerAdapter;
import smartbox.test.application.app.home.adapter.ShopsRecyclerAdapter;
import smartbox.test.application.app.splash.SplashActivity;
import smartbox.test.application.app.splash.SplashActivity_MembersInjector;
import smartbox.test.application.data.repository.RepositoryApi;
import smartbox.test.application.data.repository.RepositoryImpl_Factory;
import smartbox.test.application.data.retrofit.APIError;
import smartbox.test.application.data.retrofit.ServerApi;
import smartbox.test.application.di.home.event.EventsFragmentComponent;
import smartbox.test.application.di.home.event.EventsFragmentModule;
import smartbox.test.application.di.home.event.EventsFragmentModule_ProvideUserAdapterFactory;
import smartbox.test.application.di.home.event.EventsFragmentModule_ProvideUserListListenerFactory;
import smartbox.test.application.di.home.event.EventsFragmentModule_ProvideViewModelFactory;
import smartbox.test.application.di.home.mainActivity.MainActivityComponent;
import smartbox.test.application.di.home.map.MapFragmentComponent;
import smartbox.test.application.di.home.profile.ProfileFragmentComponent;
import smartbox.test.application.di.home.profile.ProfileFragmentModule;
import smartbox.test.application.di.home.profile.ProfileFragmentModule_ProvideViewModelFactory;
import smartbox.test.application.di.home.shop.ShopsFragmentComponent;
import smartbox.test.application.di.home.shop.ShopsFragmentModule;
import smartbox.test.application.di.home.shop.ShopsFragmentModule_ProvideShopsAdapterFactory;
import smartbox.test.application.di.home.shop.ShopsFragmentModule_ProvideShopsListListenerFactory;
import smartbox.test.application.di.home.shop.ShopsFragmentModule_ProvideViewModelFactory;
import smartbox.test.application.di.home.viewPager.ViewPagerFragmentComponent;
import smartbox.test.application.di.home.viewPager.ViewPagerFragmentModule;
import smartbox.test.application.di.home.viewPager.ViewPagerFragmentModule_ProvideViewModelFactory;
import smartbox.test.application.di.splash.SplashActivityComponent;
import smartbox.test.application.di.splash.SplashModule;
import smartbox.test.application.di.splash.SplashModule_ProvideSplashViewModelFactory;
import smartbox.test.application.di.viewmodel.ViewModelComponent;
import smartbox.test.application.utils.NetworkHelper;
import smartbox.test.application.viewmodel.EventsFragmentViewModel;
import smartbox.test.application.viewmodel.EventsFragmentViewModel_Factory;
import smartbox.test.application.viewmodel.EventsFragmentViewModel_MembersInjector;
import smartbox.test.application.viewmodel.InformationFragmentViewModel;
import smartbox.test.application.viewmodel.InformationFragmentViewModel_Factory;
import smartbox.test.application.viewmodel.InformationFragmentViewModel_MembersInjector;
import smartbox.test.application.viewmodel.SplashActivityViewModel;
import smartbox.test.application.viewmodel.SplashActivityViewModel_Factory;
import smartbox.test.application.viewmodel.SplashActivityViewModel_MembersInjector;

public final class DaggerAppComponent implements AppComponent {
  private Provider<SplashActivityComponent.Builder> splashActivityComponentBuilderProvider;

  private Provider<MainActivityComponent.Builder> mainActivityComponentBuilderProvider;

  private Provider<ViewModelComponent.Builder> viewModelComponentBuilderProvider;

  private Provider<ViewModelProvider.Factory> provideViewModelFactoryProvider;

  private Provider<App> applicationProvider;

  private Provider<NetworkHelper> provideNetworkHelperProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<OkHttpClient> getOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ServerApi> getServerApiProvider;

  private Provider<Converter<ResponseBody, APIError>> provideRetrofitConverterProvider;

  private RepositoryImpl_Factory repositoryImplProvider;

  private Provider<RepositoryApi> provideServerApiProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(SplashActivity.class, (Provider) splashActivityComponentBuilderProvider)
        .put(MainActivity.class, (Provider) mainActivityComponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.splashActivityComponentBuilderProvider =
        new Provider<SplashActivityComponent.Builder>() {
          @Override
          public SplashActivityComponent.Builder get() {
            return new SplashActivityComponentBuilder();
          }
        };
    this.mainActivityComponentBuilderProvider =
        new Provider<MainActivityComponent.Builder>() {
          @Override
          public MainActivityComponent.Builder get() {
            return new MainActivityComponentBuilder();
          }
        };
    this.viewModelComponentBuilderProvider =
        new Provider<ViewModelComponent.Builder>() {
          @Override
          public ViewModelComponent.Builder get() {
            return new ViewModelComponentBuilder();
          }
        };
    this.provideViewModelFactoryProvider =
        DoubleCheck.provider(
            AppModule_ProvideViewModelFactoryFactory.create(
                builder.appModule, viewModelComponentBuilderProvider));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideNetworkHelperProvider =
        DoubleCheck.provider(
            AppModule_ProvideNetworkHelperFactory.create(builder.appModule, applicationProvider));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            AppModule_ProvideSharedPreferencesFactory.create(
                builder.appModule, applicationProvider));
    this.getOkHttpClientProvider =
        DoubleCheck.provider(DataModule_GetOkHttpClientFactory.create(builder.dataModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            DataModule_ProvideRetrofitFactory.create(builder.dataModule, getOkHttpClientProvider));
    this.getServerApiProvider =
        DoubleCheck.provider(
            DataModule_GetServerApiFactory.create(builder.dataModule, provideRetrofitProvider));
    this.provideRetrofitConverterProvider =
        DoubleCheck.provider(
            DataModule_ProvideRetrofitConverterFactory.create(
                builder.dataModule, provideRetrofitProvider));
    this.repositoryImplProvider =
        RepositoryImpl_Factory.create(getServerApiProvider, provideRetrofitConverterProvider);
    this.provideServerApiProvider = DoubleCheck.provider((Provider) repositoryImplProvider);
  }

  @Override
  public void inject(App app) {
    injectApp(app);
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectActivityInjector(instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private DataModule dataModule;

    private App application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (application == null) {
        throw new IllegalStateException(App.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(App app) {
      this.application = Preconditions.checkNotNull(app);
      return this;
    }
  }

  private final class SplashActivityComponentBuilder extends SplashActivityComponent.Builder {
    private SplashModule splashModule;

    private SplashActivity seedInstance;

    @Override
    public SplashActivityComponent build() {
      if (splashModule == null) {
        this.splashModule = new SplashModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivityComponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivityComponentImpl implements SplashActivityComponent {
    private SplashModule splashModule;

    private SplashActivity seedInstance;

    private SplashActivityComponentImpl(SplashActivityComponentBuilder builder) {
      initialize(builder);
    }

    private SplashActivityViewModel getSplashActivityViewModel() {
      return SplashModule_ProvideSplashViewModelFactory.proxyProvideSplashViewModel(
          splashModule,
          seedInstance,
          DaggerAppComponent.this.provideViewModelFactoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SplashActivityComponentBuilder builder) {
      this.splashModule = builder.splashModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      SplashActivity_MembersInjector.injectViewModel(instance, getSplashActivityViewModel());
      SplashActivity_MembersInjector.injectNetworkHelper(
          instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
      SplashActivity_MembersInjector.injectSharedPreferences(
          instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
      return instance;
    }
  }

  private final class MainActivityComponentBuilder extends MainActivityComponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityComponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivityComponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivityComponentImpl implements MainActivityComponent {
    private Provider<EventsFragmentComponent.Builder> eventsFragmentComponentBuilderProvider;

    private Provider<ProfileFragmentComponent.Builder> profileFragmentComponentBuilderProvider;

    private Provider<ViewPagerFragmentComponent.Builder> viewPagerFragmentComponentBuilderProvider;

    private Provider<ShopsFragmentComponent.Builder> shopsFragmentComponentBuilderProvider;

    private Provider<MapFragmentComponent.Builder> mapFragmentComponentBuilderProvider;

    private MainActivityComponentImpl(MainActivityComponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(5)
          .put(EventsFragment.class, (Provider) eventsFragmentComponentBuilderProvider)
          .put(InformationFragment.class, (Provider) profileFragmentComponentBuilderProvider)
          .put(VievPagerFragment.class, (Provider) viewPagerFragmentComponentBuilderProvider)
          .put(ShopsFragment.class, (Provider) shopsFragmentComponentBuilderProvider)
          .put(MapFragment.class, (Provider) mapFragmentComponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivityComponentBuilder builder) {
      this.eventsFragmentComponentBuilderProvider =
          new Provider<EventsFragmentComponent.Builder>() {
            @Override
            public EventsFragmentComponent.Builder get() {
              return new EventsFragmentComponentBuilder();
            }
          };
      this.profileFragmentComponentBuilderProvider =
          new Provider<ProfileFragmentComponent.Builder>() {
            @Override
            public ProfileFragmentComponent.Builder get() {
              return new ProfileFragmentComponentBuilder();
            }
          };
      this.viewPagerFragmentComponentBuilderProvider =
          new Provider<ViewPagerFragmentComponent.Builder>() {
            @Override
            public ViewPagerFragmentComponent.Builder get() {
              return new ViewPagerFragmentComponentBuilder();
            }
          };
      this.shopsFragmentComponentBuilderProvider =
          new Provider<ShopsFragmentComponent.Builder>() {
            @Override
            public ShopsFragmentComponent.Builder get() {
              return new ShopsFragmentComponentBuilder();
            }
          };
      this.mapFragmentComponentBuilderProvider =
          new Provider<MapFragmentComponent.Builder>() {
            @Override
            public MapFragmentComponent.Builder get() {
              return new MapFragmentComponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class EventsFragmentComponentBuilder extends EventsFragmentComponent.Builder {
      private EventsFragmentModule eventsFragmentModule;

      private EventsFragment seedInstance;

      @Override
      public EventsFragmentComponent build() {
        if (eventsFragmentModule == null) {
          this.eventsFragmentModule = new EventsFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(EventsFragment.class.getCanonicalName() + " must be set");
        }
        return new EventsFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(EventsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EventsFragmentComponentImpl implements EventsFragmentComponent {
      private EventsFragmentModule eventsFragmentModule;

      private EventsFragment seedInstance;

      private EventsFragmentComponentImpl(EventsFragmentComponentBuilder builder) {
        initialize(builder);
      }

      private EventsFragmentViewModel getEventsFragmentViewModel() {
        return EventsFragmentModule_ProvideViewModelFactory.proxyProvideViewModel(
            eventsFragmentModule,
            seedInstance,
            DaggerAppComponent.this.provideViewModelFactoryProvider.get());
      }

      private EventsRecyclerAdapter.UserItemListListener getUserItemListListener() {
        return EventsFragmentModule_ProvideUserListListenerFactory.proxyProvideUserListListener(
            eventsFragmentModule, seedInstance);
      }

      private EventsRecyclerAdapter getEventsRecyclerAdapter() {
        return EventsFragmentModule_ProvideUserAdapterFactory.proxyProvideUserAdapter(
            eventsFragmentModule, getUserItemListListener());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final EventsFragmentComponentBuilder builder) {
        this.eventsFragmentModule = builder.eventsFragmentModule;
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(EventsFragment arg0) {
        injectEventsFragment(arg0);
      }

      private EventsFragment injectEventsFragment(EventsFragment instance) {
        EventsFragment_MembersInjector.injectViewModel(instance, getEventsFragmentViewModel());
        EventsFragment_MembersInjector.injectNetworkHelper(
            instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
        EventsFragment_MembersInjector.injectUserRecyclerAdapter(
            instance, getEventsRecyclerAdapter());
        return instance;
      }
    }

    private final class ProfileFragmentComponentBuilder extends ProfileFragmentComponent.Builder {
      private ProfileFragmentModule profileFragmentModule;

      private InformationFragment seedInstance;

      @Override
      public ProfileFragmentComponent build() {
        if (profileFragmentModule == null) {
          this.profileFragmentModule = new ProfileFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              InformationFragment.class.getCanonicalName() + " must be set");
        }
        return new ProfileFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(InformationFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ProfileFragmentComponentImpl implements ProfileFragmentComponent {
      private ProfileFragmentModule profileFragmentModule;

      private InformationFragment seedInstance;

      private ProfileFragmentComponentImpl(ProfileFragmentComponentBuilder builder) {
        initialize(builder);
      }

      private InformationFragmentViewModel getInformationFragmentViewModel() {
        return ProfileFragmentModule_ProvideViewModelFactory.proxyProvideViewModel(
            profileFragmentModule,
            seedInstance,
            DaggerAppComponent.this.provideViewModelFactoryProvider.get());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ProfileFragmentComponentBuilder builder) {
        this.profileFragmentModule = builder.profileFragmentModule;
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(InformationFragment arg0) {
        injectInformationFragment(arg0);
      }

      private InformationFragment injectInformationFragment(InformationFragment instance) {
        InformationFragment_MembersInjector.injectViewModel(
            instance, getInformationFragmentViewModel());
        InformationFragment_MembersInjector.injectNetworkHelper(
            instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
        return instance;
      }
    }

    private final class ViewPagerFragmentComponentBuilder
        extends ViewPagerFragmentComponent.Builder {
      private ViewPagerFragmentModule viewPagerFragmentModule;

      private VievPagerFragment seedInstance;

      @Override
      public ViewPagerFragmentComponent build() {
        if (viewPagerFragmentModule == null) {
          this.viewPagerFragmentModule = new ViewPagerFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(
              VievPagerFragment.class.getCanonicalName() + " must be set");
        }
        return new ViewPagerFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(VievPagerFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ViewPagerFragmentComponentImpl implements ViewPagerFragmentComponent {
      private ViewPagerFragmentModule viewPagerFragmentModule;

      private VievPagerFragment seedInstance;

      private ViewPagerFragmentComponentImpl(ViewPagerFragmentComponentBuilder builder) {
        initialize(builder);
      }

      private EventsFragmentViewModel getEventsFragmentViewModel() {
        return ViewPagerFragmentModule_ProvideViewModelFactory.proxyProvideViewModel(
            viewPagerFragmentModule,
            seedInstance,
            DaggerAppComponent.this.provideViewModelFactoryProvider.get());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ViewPagerFragmentComponentBuilder builder) {
        this.viewPagerFragmentModule = builder.viewPagerFragmentModule;
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(VievPagerFragment arg0) {
        injectVievPagerFragment(arg0);
      }

      private VievPagerFragment injectVievPagerFragment(VievPagerFragment instance) {
        VievPagerFragment_MembersInjector.injectViewModel(instance, getEventsFragmentViewModel());
        VievPagerFragment_MembersInjector.injectNetworkHelper(
            instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
        return instance;
      }
    }

    private final class ShopsFragmentComponentBuilder extends ShopsFragmentComponent.Builder {
      private ShopsFragmentModule shopsFragmentModule;

      private ShopsFragment seedInstance;

      @Override
      public ShopsFragmentComponent build() {
        if (shopsFragmentModule == null) {
          this.shopsFragmentModule = new ShopsFragmentModule();
        }
        if (seedInstance == null) {
          throw new IllegalStateException(ShopsFragment.class.getCanonicalName() + " must be set");
        }
        return new ShopsFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(ShopsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ShopsFragmentComponentImpl implements ShopsFragmentComponent {
      private ShopsFragmentModule shopsFragmentModule;

      private ShopsFragment seedInstance;

      private ShopsFragmentComponentImpl(ShopsFragmentComponentBuilder builder) {
        initialize(builder);
      }

      private EventsFragmentViewModel getEventsFragmentViewModel() {
        return ShopsFragmentModule_ProvideViewModelFactory.proxyProvideViewModel(
            shopsFragmentModule,
            seedInstance,
            DaggerAppComponent.this.provideViewModelFactoryProvider.get());
      }

      private ShopsRecyclerAdapter.UserItemListListener getUserItemListListener() {
        return ShopsFragmentModule_ProvideShopsListListenerFactory.proxyProvideShopsListListener(
            shopsFragmentModule, seedInstance);
      }

      private ShopsRecyclerAdapter getShopsRecyclerAdapter() {
        return ShopsFragmentModule_ProvideShopsAdapterFactory.proxyProvideShopsAdapter(
            shopsFragmentModule, getUserItemListListener());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ShopsFragmentComponentBuilder builder) {
        this.shopsFragmentModule = builder.shopsFragmentModule;
        this.seedInstance = builder.seedInstance;
      }

      @Override
      public void inject(ShopsFragment arg0) {
        injectShopsFragment(arg0);
      }

      private ShopsFragment injectShopsFragment(ShopsFragment instance) {
        ShopsFragment_MembersInjector.injectViewModel(instance, getEventsFragmentViewModel());
        ShopsFragment_MembersInjector.injectNetworkHelper(
            instance, DaggerAppComponent.this.provideNetworkHelperProvider.get());
        ShopsFragment_MembersInjector.injectUserRecyclerAdapter(
            instance, getShopsRecyclerAdapter());
        return instance;
      }
    }

    private final class MapFragmentComponentBuilder extends MapFragmentComponent.Builder {
      private MapFragment seedInstance;

      @Override
      public MapFragmentComponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(MapFragment.class.getCanonicalName() + " must be set");
        }
        return new MapFragmentComponentImpl(this);
      }

      @Override
      public void seedInstance(MapFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MapFragmentComponentImpl implements MapFragmentComponent {
      private MapFragmentComponentImpl(MapFragmentComponentBuilder builder) {}

      @Override
      public void inject(MapFragment arg0) {
        injectMapFragment(arg0);
      }

      private MapFragment injectMapFragment(MapFragment instance) {
        MapFragment_MembersInjector.injectSharedPreferences(
            instance, DaggerAppComponent.this.provideSharedPreferencesProvider.get());
        return instance;
      }
    }
  }

  private final class ViewModelComponentBuilder implements ViewModelComponent.Builder {
    @Override
    public ViewModelComponent build() {
      return new ViewModelComponentImpl(this);
    }
  }

  private final class ViewModelComponentImpl implements ViewModelComponent {
    private ViewModelComponentImpl(ViewModelComponentBuilder builder) {}

    @Override
    public SplashActivityViewModel splashActivityViewModel() {
      return injectSplashActivityViewModel(
          SplashActivityViewModel_Factory.newSplashActivityViewModel());
    }

    @Override
    public EventsFragmentViewModel eventsFragmentViewModel() {
      return injectEventsFragmentViewModel(
          EventsFragmentViewModel_Factory.newEventsFragmentViewModel());
    }

    @Override
    public InformationFragmentViewModel informationFragmentViewModel() {
      return injectInformationFragmentViewModel(
          InformationFragmentViewModel_Factory.newInformationFragmentViewModel());
    }

    private SplashActivityViewModel injectSplashActivityViewModel(
        SplashActivityViewModel instance) {
      SplashActivityViewModel_MembersInjector.injectRepositoryApi(
          instance, DaggerAppComponent.this.provideServerApiProvider.get());
      return instance;
    }

    private EventsFragmentViewModel injectEventsFragmentViewModel(
        EventsFragmentViewModel instance) {
      EventsFragmentViewModel_MembersInjector.injectRepositoryApi(
          instance, DaggerAppComponent.this.provideServerApiProvider.get());
      return instance;
    }

    private InformationFragmentViewModel injectInformationFragmentViewModel(
        InformationFragmentViewModel instance) {
      InformationFragmentViewModel_MembersInjector.injectRepositoryApi(
          instance, DaggerAppComponent.this.provideServerApiProvider.get());
      return instance;
    }
  }
}
