// Generated by Dagger (https://google.github.io/dagger).
package smartbox.test.application.viewmodel;

import dagger.internal.Factory;
import javax.inject.Provider;
import smartbox.test.application.data.repository.RepositoryApi;

public final class InformationFragmentViewModel_Factory
    implements Factory<InformationFragmentViewModel> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  public InformationFragmentViewModel_Factory(Provider<RepositoryApi> repositoryApiProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
  }

  @Override
  public InformationFragmentViewModel get() {
    return provideInstance(repositoryApiProvider);
  }

  public static InformationFragmentViewModel provideInstance(
      Provider<RepositoryApi> repositoryApiProvider) {
    InformationFragmentViewModel instance = new InformationFragmentViewModel();
    InformationFragmentViewModel_MembersInjector.injectRepositoryApi(
        instance, repositoryApiProvider.get());
    return instance;
  }

  public static InformationFragmentViewModel_Factory create(
      Provider<RepositoryApi> repositoryApiProvider) {
    return new InformationFragmentViewModel_Factory(repositoryApiProvider);
  }

  public static InformationFragmentViewModel newInformationFragmentViewModel() {
    return new InformationFragmentViewModel();
  }
}
